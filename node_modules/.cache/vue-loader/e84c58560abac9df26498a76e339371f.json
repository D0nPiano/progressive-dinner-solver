{"remainingRequest":"/home/donpiano/running-dinner-solver/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/donpiano/running-dinner-solver/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/donpiano/running-dinner-solver/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/donpiano/running-dinner-solver/src/components/Assignments.vue?vue&type=template&id=45a57e46&","dependencies":[{"path":"/home/donpiano/running-dinner-solver/src/components/Assignments.vue","mtime":1574530611910},{"path":"/home/donpiano/running-dinner-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donpiano/running-dinner-solver/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/donpiano/running-dinner-solver/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/donpiano/running-dinner-solver/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}